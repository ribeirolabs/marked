// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id     String  @id @default(cuid())
  name   String
  email  String  @unique
  avatar String?

  sessions Session[]
  accounts Account[]
  marks    Mark[]
  folders  Folder[]
  tags     Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  type              String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id      String   @id @default(cuid())
  token   String
  expires DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mark {
  id          String  @id @default(cuid())
  link        String
  title       String?
  description String?
  image       String?

  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId String?

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  tags Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id          String  @id @default(cuid())
  name        String
  description String?

  folderId String?
  folder   Folder? @relation("Parent", fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String?

  folders Folder[] @relation("Parent")
  marks   Mark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id   String @id @default(cuid())
  name String

  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String?

  marks Mark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
